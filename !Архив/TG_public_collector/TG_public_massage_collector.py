# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ / Import required libraries
import asyncio  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è / For asynchronous programming
from telethon.sync import TelegramClient  # –ö–ª–∏–µ–Ω—Ç Telegram API / Telegram API client
from telethon.tl.functions.messages import GetHistoryRequest  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π / For getting message history
from telethon.errors import SessionPasswordNeededError  # –û—à–∏–±–∫–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ / 2FA error
from datetime import datetime  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º / For date and time handling
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ / For timezone handling
import configparser  # –î–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ / For reading config files

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã / Timezone settings
# –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å) / Default timezone (can be changed):
# –ü—Ä–∏–º–µ—Ä—ã –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–æ–Ω: / Examples of popular timezones:
# Europe/Moscow (–ú–æ—Å–∫–≤–∞), Europe/Kyiv (–ö–∏–µ–≤), Asia/Tbilisi (–¢–±–∏–ª–∏—Å–∏) / (Moscow, Kyiv, Tbilisi)
# Asia/Dubai (–î—É–±–∞–π), Asia/Tokyo (–¢–æ–∫–∏–æ), Europe/London (–õ–æ–Ω–¥–æ–Ω) / (Dubai, Tokyo, London)
# America/New_York (–ù—å—é-–ô–æ—Ä–∫), Asia/Shanghai (–®–∞–Ω—Ö–∞–π) / (New York, Shanghai)
DEFAULT_TZ = pytz.timezone('Europe/Moscow')

# –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤ / Dictionary of Russian month names
RUS_MONTHS = {
    1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
    5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
    9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
}

def input_current_month_time(prefix):
    """
    –í–≤–æ–¥ –¥–Ω—è –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ / 
    Input day and time for current month
    """
    now = datetime.now(DEFAULT_TZ)
    print(f"\n=== {prefix} –¥–∞—Ç–∞ (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü {RUS_MONTHS[now.month]} {now.year}) ===")
    print(f"=== {prefix} date (current month {RUS_MONTHS[now.month]} {now.year}) ===")
    
    while True:
        try:
            # –í–≤–æ–¥ –¥–Ω—è / Input day
            day = int(input(f"–î–µ–Ω—å (1-31, Enter - {now.day}): ") or now.day)
            # –í–≤–æ–¥ —á–∞—Å–∞ / Input hour
            hour = int(input("–ß–∞—Å (0-23, Enter - 00): ") or 0)
            # –í–≤–æ–¥ –º–∏–Ω—É—Ç / Input minutes
            minute = int(input("–ú–∏–Ω—É—Ç—ã (0-59, Enter - 00): ") or 0)

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ datetime —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã / Create datetime object with timezone
            dt = DEFAULT_TZ.localize(datetime(
                year=now.year,
                month=now.month,
                day=day,
                hour=hour,
                minute=minute
            ))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º / Check date is not in the future
            if dt > datetime.now(DEFAULT_TZ):
                print("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! / Date cannot be in the future!")
                continue

            return dt
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e} / Error: {e}")

def input_full_datetime(prefix):
    """
    –í–≤–æ–¥ –ø–æ–ª–Ω–æ–π –¥–∞—Ç—ã (–≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å, –≤—Ä–µ–º—è) / 
    Input full date (year, month, day, time)
    """
    print(f"\n=== {prefix} –¥–∞—Ç–∞ ===")
    print(f"=== {prefix} date ===")
    
    while True:
        try:
            # –í–≤–æ–¥ –≥–æ–¥–∞ / Input year
            year = int(input("–ì–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2024): / Year (e.g. 2024): "))
            # –í–≤–æ–¥ –º–µ—Å—è—Ü–∞ / Input month
            month = int(input("–ú–µ—Å—è—Ü (1-12): / Month (1-12): "))
            # –í–≤–æ–¥ –¥–Ω—è / Input day
            day = int(input("–î–µ–Ω—å (1-31): / Day (1-31): "))
            # –í–≤–æ–¥ —á–∞—Å–∞ / Input hour
            hour = int(input("–ß–∞—Å (0-23, Enter - 00): / Hour (0-23, Enter - 00): ") or 0)
            # –í–≤–æ–¥ –º–∏–Ω—É—Ç / Input minutes
            minute = int(input("–ú–∏–Ω—É—Ç—ã (0-59, Enter - 00): / Minutes (0-59, Enter - 00): ") or 0)

            # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ datetime —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã / Create datetime object with timezone
            dt = DEFAULT_TZ.localize(datetime(
                year=year,
                month=month,
                day=day,
                hour=hour,
                minute=minute
            ))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –±—É–¥—É—â–µ–º / Check date is not in the future
            if dt > datetime.now(DEFAULT_TZ):
                print("‚ö†Ô∏è –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! / Date cannot be in the future!")
                continue

            return dt
        except ValueError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e} / Error: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è / Main function"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ / Load configuration from file
    config = configparser.ConfigParser()
    config.read('config.ini', encoding='utf-8')
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Telegram / Get Telegram credentials
    api_id = config.get('Telegram', 'api_id')
    api_hash = config.get('Telegram', 'api_hash')
    phone = config.get('Telegram', 'phone')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram / Initialize Telegram client
    client = TelegramClient('session_name', api_id, api_hash)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram / Connect to Telegram
        await client.connect()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ / Check authorization
        if not await client.is_user_authorized():
            # –ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è / Request verification code
            await client.send_code_request(phone)
            try:
                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: / Enter code from Telegram: ")
                await client.sign_in(phone, code)
            except SessionPasswordNeededError:
                # –ó–∞–ø—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ / Request 2FA password
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: / Enter 2FA password: ")
                await client.sign_in(password=password)
        
        # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞ / Input channel parameters
        channel = input("–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ ID –∫–∞–Ω–∞–ª–∞: / Enter @username or channel ID: ").strip()
        filename = f"report_{datetime.now(DEFAULT_TZ).strftime('%Y-%m-%d_%H-%M-%S')}.txt"
        print(f"\nüìÅ –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        print(f"üìÅ Messages will be saved to file: {filename}")

        # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ / Select time range
        now = datetime.now(DEFAULT_TZ)
        current_month = f"{RUS_MONTHS[now.month]} {now.year}"
        use_current = input(
            f"\n–°–æ–±–∏—Ä–∞–µ–º –∑–∞ {current_month}? (Enter - –¥–∞ / –ª—é–±–æ–π —Å–∏–º–≤–æ–ª - –Ω–µ—Ç): "
            f"\nCollect for {current_month}? (Enter - yes / any key - no): ")

        if not use_current.strip():
            # –†–µ–∂–∏–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ / Current month mode
            start_date = input_current_month_time("–ù–∞—á–∞–ª—å–Ω–∞—è / Start")
            end_input = input(
                "\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã? (Enter - –¥–∞ / –ª—é–±–æ–π —Å–∏–º–≤–æ–ª - –Ω–µ—Ç): "
                "\nUse current time for end date? (Enter - yes / any key - no): ")
            end_date = datetime.now(DEFAULT_TZ) if not end_input.strip() else input_current_month_time("–ö–æ–Ω–µ—á–Ω–∞—è / End")
        else:
            # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ / Custom period
            start_date = input_full_datetime("–ù–∞—á–∞–ª—å–Ω–∞—è / Start")
            end_date = input_full_datetime("–ö–æ–Ω–µ—á–Ω–∞—è / End")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç / Check date range validity
        if start_date > end_date:
            print("‚ùå –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π! / ‚ùå Start date is after end date!")
            return

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–∞—Ç –≤ UTC / Convert dates to UTC
        start_utc = start_date.astimezone(pytz.utc)
        end_utc = end_date.astimezone(pytz.utc)

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏–∞–ø–∞–∑–æ–Ω–µ / Print range info
        print(f"\n‚è≥ –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {start_date.strftime('%d.%m.%Y %H:%M')}")
        print(f"‚è≥ Collecting messages from {start_date.strftime('%d.%m.%Y %H:%M')}")
        print(f"                  –ø–æ {end_date.strftime('%d.%m.%Y %H:%M')} ({DEFAULT_TZ.zone})")
        print(f"                  to {end_date.strftime('%d.%m.%Y %H:%M')} ({DEFAULT_TZ.zone})")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞ / Get channel entity
        entity = await client.get_entity(channel)
        print(f"\n‚è≥ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–∞–Ω–∞–ª—É: {entity.title}")
        print(f"‚è≥ Connecting to channel: {entity.title}")

        # –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π / Collect messages
        all_messages = []
        offset_id = 0
        total = 0

        while True:
            # –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π / Request message history
            history = await client(GetHistoryRequest(
                peer=entity,
                offset_id=offset_id,
                limit=100,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å / Number of messages per request
                offset_date=None,
                add_offset=0,
                max_id=0,
                min_id=0,
                hash=0
            ))

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç / If no more messages
            if not history.messages:
                break

            messages = history.messages
            for msg in messages:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω / Check if within range
                if start_utc <= msg.date <= end_utc:
                    local_time = msg.date.astimezone(DEFAULT_TZ)
                    all_messages.append({
                        'datetime': local_time,  # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ / For sorting
                        'date': local_time.strftime("%d.%m.%Y %H:%M:%S"),  # –î–ª—è –≤—ã–≤–æ–¥–∞ / For display
                        'text': msg.message
                    })
                    total += 1
                elif msg.date < start_utc:
                    break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É / Stop if below start date

            offset_id = messages[-1].id  # –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ / Offset for next request
            print(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total} —Å–æ–æ–±—â–µ–Ω–∏–π / Processed {total} messages", end='\r')

            if messages[-1].date < start_utc:
                break  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –µ—Å–ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä–µ–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã / Stop if all messages are older

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –¥–∞—Ç–µ / Sort messages by date
        all_messages.sort(key=lambda x: x['datetime'])

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª / Save to file
        with open(filename, 'w', encoding='utf-8') as f:
            for msg in all_messages:
                f.write(f"[{msg['date']}]\n{msg['text']}\n\n")

        print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–∞–π–ª {filename}")
        print(f"‚úÖ Done! Saved {total} messages to file {filename}")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"‚ùå Critical error: {str(e)}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è / Close connection
        await client.disconnect()
        print("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ / Connection closed")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ / Run async function
    asyncio.run(main())