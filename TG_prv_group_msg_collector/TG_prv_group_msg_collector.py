import os
import logging
from datetime import datetime
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
DEFAULT_TZ = pytz.timezone('Europe/Moscow')
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
OUTPUT_DIR = os.path.join(SCRIPT_DIR, 'Collected_messages')
TOKEN_FILE = os.path.join(SCRIPT_DIR, 'bot_token.txt')
LOG_FILE = os.path.join(SCRIPT_DIR, 'bot.log')
MAX_LOG_SIZE = 5 * 1024 * 1024  # 5 –ú–ë –≤ –±–∞–π—Ç–∞—Ö

# –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤
RUS_MONTHS = {
    1: '–Ø–Ω–≤–∞—Ä—å', 2: '–§–µ–≤—Ä–∞–ª—å', 3: '–ú–∞—Ä—Ç', 4: '–ê–ø—Ä–µ–ª—å',
    5: '–ú–∞–π', 6: '–ò—é–Ω—å', 7: '–ò—é–ª—å', 8: '–ê–≤–≥—É—Å—Ç',
    9: '–°–µ–Ω—Ç—è–±—Ä—å', 10: '–û–∫—Ç—è–±—Ä—å', 11: '–ù–æ—è–±—Ä—å', 12: '–î–µ–∫–∞–±—Ä—å'
}

# ========== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        if os.path.exists(LOG_FILE) and os.path.getsize(LOG_FILE) > MAX_LOG_SIZE:
            with open(LOG_FILE, 'w', encoding='utf-8') as f:
                f.write(f"=== –õ–æ–≥-—Ñ–∞–π–ª –æ—á–∏—â–µ–Ω {datetime.now(DEFAULT_TZ)} ===\n\n")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(LOG_FILE, encoding='utf-8', mode='a'),
                logging.StreamHandler()
            ]
        )
        logger = logging.getLogger(__name__)
        logger.info(f"–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ. –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ª–æ–≥–∞: {MAX_LOG_SIZE//1024//1024} –ú–ë")
        return logger
    except Exception as e:
        print(f"–û–®–ò–ë–ö–ê –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø: {e}")
        raise

logger = setup_logging()

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def get_bot_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        if not os.path.exists(TOKEN_FILE):
            raise FileNotFoundError(f"–§–∞–π–ª —Å —Ç–æ–∫–µ–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: {TOKEN_FILE}")
        
        with open(TOKEN_FILE, 'r') as f:
            token = f.read().strip()
        
        if not token:
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        return token
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise

def get_daily_filename(chat_id: int, date: datetime) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–±–æ—Ä–∞"""
    chat_dir = os.path.join(OUTPUT_DIR, str(chat_id))
    os.makedirs(chat_dir, exist_ok=True)
    return os.path.join(chat_dir, f"{date.year}-{RUS_MONTHS[date.month]}-{date.day}.txt")

# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        "–Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/collect - –Ω–∞—á–∞—Ç—å —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/stop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
        "–ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ —á–∞—Ç –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
    )
    await update.message.reply_text(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç\n"
        "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
        "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /collect –≤ —á–∞—Ç–µ\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /stop –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n\n"
        "–°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ñ–∞–π–ª—ã –ø–æ –¥–Ω—è–º."
    )
    await update.message.reply_text(help_text)

async def collect_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.effective_chat:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö!")
        return

    chat = update.effective_chat
    chat_title = chat.title or "–õ–°"
    chat_id = chat.id
    now = datetime.now(DEFAULT_TZ)

    try:
        filepath = get_daily_filename(chat_id, now)
        with open(filepath, 'a', encoding='utf-8') as f:
            f.write(f"=== –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ {now.strftime('%d.%m.%Y %H:%M')} ===\n\n")
        
        context.chat_data['collecting'] = True
        context.chat_data['current_file'] = filepath
        
        await update.message.reply_text(
            f"‚úÖ –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞—á–∞—Ç –≤ —á–∞—Ç–µ '{chat_title}'\n"
            f"üìÅ –§–∞–π–ª: {filepath}"
        )
        logger.info(f"–°–±–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}. –§–∞–π–ª: {filepath}")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞: {e}"
        await update.message.reply_text(error_msg)
        logger.error(error_msg)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.effective_chat:
        return

    if 'collecting' not in context.chat_data or not context.chat_data['collecting']:
        return

    message = update.message
    user = message.from_user
    msg_date = message.date.astimezone(DEFAULT_TZ)
    text = message.text or message.caption or "[–º–µ–¥–∏–∞]"

    log_entry = (
        f"[{msg_date.strftime('%d.%m.%Y %H:%M:%S')}] "
        f"{user.full_name if user else '–ê–Ω–æ–Ω–∏–º'}:\n"
        f"{text}\n\n"
    )

    try:
        with open(context.chat_data['current_file'], 'a', encoding='utf-8') as f:
            f.write(log_entry)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def stop_collecting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if 'collecting' in context.chat_data and context.chat_data['collecting']:
        context.chat_data['collecting'] = False
        await update.message.reply_text("‚ùå –°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info("–°–±–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–±–æ—Ä –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        logger.info(f"–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π: {OUTPUT_DIR}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        token = get_bot_token()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
        application = Application.builder().token(token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        handlers = [
            CommandHandler("start", start),
            CommandHandler("help", help_command),
            CommandHandler("collect", collect_messages),
            CommandHandler("stop", stop_collecting),
            MessageHandler(filters.ALL, handle_message)
        ]
        
        for handler in handlers:
            application.add_handler(handler)

        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –õ–æ–≥–∏: {LOG_FILE} (–º–∞–∫—Å. {MAX_LOG_SIZE//1024//1024} –ú–ë)")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True)
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == '__main__':
    main()